#P7

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DataMarketplace {
    struct Listing {
        address payable seller;
        string dataCID;   // IPFS CID of the dataset
        uint256 price;    // Price in wei
        bool sold;
    }

    Listing[] public listings;

    event DataListed(uint256 listingId, address indexed seller, string dataCID, uint256 price);
    event DataPurchased(uint256 listingId, address indexed buyer, uint256 price);

    // List a new dataset for sale
    function listData(string memory _dataCID, uint256 _price) public {
        require(_price > 0, "Price must be positive");
        listings.push(Listing(payable(msg.sender), _dataCID, _price, false));
        emit DataListed(listings.length - 1, msg.sender, _dataCID, _price);
    }

    // Purchase a listed dataset by sending exact price
    function buyData(uint256 listingId) public payable {
        require(listingId < listings.length, "Invalid listing");
        Listing storage listing = listings[listingId];
        require(!listing.sold, "Already sold");
        require(msg.value == listing.price, "Incorrect payment");

        listing.sold = true;
        listing.seller.transfer(msg.value);
        emit DataPurchased(listingId, msg.sender, msg.value);
    }

    // Get total number of listings
    function getListingCount() public view returns (uint256) {
        return listings.length;
    }

    // Get listing details
    function getListing(uint256 listingId) public view returns (
        address seller,
        string memory dataCID,
        uint256 price,
        bool sold
    ) {
        require(listingId < listings.length, "Invalid listing");
        Listing storage listing = listings[listingId];
        return (listing.seller, listing.dataCID, listing.price, listing.sold);
    }
}


0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
